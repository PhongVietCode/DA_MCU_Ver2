
DA_MCU_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002458  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002588  08002588  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002588  08002588  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000064  080025f4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080025f4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008246  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000198a  00000000  00000000  00028316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  00029ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007aa  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cb7  00000000  00000000  0002ae4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad6a  00000000  00000000  00041b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846dd  00000000  00000000  0004c86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002850  00000000  00000000  000d0f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d3798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800254c 	.word	0x0800254c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800254c 	.word	0x0800254c

0800014c <isButtonPress>:

// flag for buttons
static int button_flag[NO_OF_BUTTONS];
static int button_flag_long[NO_OF_BUTTONS];
int isButtonPress(int index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    // if press, turn off the flag and return 1
    if (button_flag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPress+0x22>
    {
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPress+0x24>
    }

    // if not just return 0
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000bc 	.word	0x200000bc

08000180 <isButtonLongPress>:
int isButtonLongPress(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	// if press return 1 and turn off flag
	 if (button_flag_long[index] == 1)
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <isButtonLongPress+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPress+0x22>
	{
		button_flag_long[index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <isButtonLongPress+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPress+0x24>
	}
	// if not just return 0
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200000c8 	.word	0x200000c8

080001b4 <button_reading>:
    {
        button_flag[index] = 1;
    }
}
void button_reading()
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++)
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e0d3      	b.n	8000368 <button_reading+0x1b4>
    {
        // debounce button
        debounce_3[i] = debounce_2[i];
 80001c0:	4a6d      	ldr	r2, [pc, #436]	; (8000378 <button_reading+0x1c4>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	496c      	ldr	r1, [pc, #432]	; (800037c <button_reading+0x1c8>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        debounce_2[i] = debounce_1[i];
 80001d0:	4a6b      	ldr	r2, [pc, #428]	; (8000380 <button_reading+0x1cc>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4967      	ldr	r1, [pc, #412]	; (8000378 <button_reading+0x1c4>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // read pin button state
        switch (i)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d020      	beq.n	8000228 <button_reading+0x74>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	dc28      	bgt.n	800023e <button_reading+0x8a>
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d003      	beq.n	80001fa <button_reading+0x46>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d00b      	beq.n	8000210 <button_reading+0x5c>
            break;
        case 2:
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
            break;
        default:
            break;
 80001f8:	e021      	b.n	800023e <button_reading+0x8a>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001fa:	2108      	movs	r1, #8
 80001fc:	4861      	ldr	r0, [pc, #388]	; (8000384 <button_reading+0x1d0>)
 80001fe:	f001 f96d 	bl	80014dc <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	4619      	mov	r1, r3
 8000206:	4a5e      	ldr	r2, [pc, #376]	; (8000380 <button_reading+0x1cc>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800020e:	e017      	b.n	8000240 <button_reading+0x8c>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000214:	485c      	ldr	r0, [pc, #368]	; (8000388 <button_reading+0x1d4>)
 8000216:	f001 f961 	bl	80014dc <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a58      	ldr	r2, [pc, #352]	; (8000380 <button_reading+0x1cc>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000226:	e00b      	b.n	8000240 <button_reading+0x8c>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000228:	2104      	movs	r1, #4
 800022a:	4857      	ldr	r0, [pc, #348]	; (8000388 <button_reading+0x1d4>)
 800022c:	f001 f956 	bl	80014dc <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	4619      	mov	r1, r3
 8000234:	4a52      	ldr	r2, [pc, #328]	; (8000380 <button_reading+0x1cc>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800023c:	e000      	b.n	8000240 <button_reading+0x8c>
            break;
 800023e:	bf00      	nop
        }

        // pass debouncing
        if ((debounce_3[i] == debounce_2[i]) && (debounce_2[i] == debounce_1[i]))
 8000240:	4a4e      	ldr	r2, [pc, #312]	; (800037c <button_reading+0x1c8>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	494b      	ldr	r1, [pc, #300]	; (8000378 <button_reading+0x1c4>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	f040 8086 	bne.w	8000362 <button_reading+0x1ae>
 8000256:	4a48      	ldr	r2, [pc, #288]	; (8000378 <button_reading+0x1c4>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4948      	ldr	r1, [pc, #288]	; (8000380 <button_reading+0x1cc>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d17b      	bne.n	8000362 <button_reading+0x1ae>
        {
            current_button_state[i] = debounce_1[i];
 800026a:	4a45      	ldr	r2, [pc, #276]	; (8000380 <button_reading+0x1cc>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	4946      	ldr	r1, [pc, #280]	; (800038c <button_reading+0x1d8>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            // fsm
            switch (button_state_save[i])
 800027a:	4a45      	ldr	r2, [pc, #276]	; (8000390 <button_reading+0x1dc>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b0d      	cmp	r3, #13
 8000284:	d041      	beq.n	800030a <button_reading+0x156>
 8000286:	2b0d      	cmp	r3, #13
 8000288:	dc64      	bgt.n	8000354 <button_reading+0x1a0>
 800028a:	2b0b      	cmp	r3, #11
 800028c:	d00d      	beq.n	80002aa <button_reading+0xf6>
 800028e:	2b0c      	cmp	r3, #12
 8000290:	d160      	bne.n	8000354 <button_reading+0x1a0>
            {
            case BUTTON_IS_RELEASED:
                /* code */
                if (current_button_state[i] == PRESS_STATE)
 8000292:	4a3e      	ldr	r2, [pc, #248]	; (800038c <button_reading+0x1d8>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d15c      	bne.n	8000358 <button_reading+0x1a4>
                {
                    button_state_save[i] = BUTTON_IS_PRESSED;
 800029e:	4a3c      	ldr	r2, [pc, #240]	; (8000390 <button_reading+0x1dc>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	210b      	movs	r1, #11
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

                }
                break;
 80002a8:	e056      	b.n	8000358 <button_reading+0x1a4>

            case BUTTON_IS_PRESSED:
                /* code */
            	if (current_button_state[i] == RELEASED_STATE)
 80002aa:	4a38      	ldr	r2, [pc, #224]	; (800038c <button_reading+0x1d8>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d10a      	bne.n	80002cc <button_reading+0x118>
			   {
            		button_flag[i] = 1;
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <button_reading+0x1e0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				   button_state_save[i] = BUTTON_IS_RELEASED;
 80002c0:	4a33      	ldr	r2, [pc, #204]	; (8000390 <button_reading+0x1dc>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	210c      	movs	r1, #12
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				   return;
 80002ca:	e051      	b.n	8000370 <button_reading+0x1bc>
			   }
                counter_for_button_pressed[i]++;
 80002cc:	4a32      	ldr	r2, [pc, #200]	; (8000398 <button_reading+0x1e4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	1c5a      	adds	r2, r3, #1
 80002d6:	4930      	ldr	r1, [pc, #192]	; (8000398 <button_reading+0x1e4>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (counter_for_button_pressed[i] >= WAITING_TIME / TIME_CYCLE)
 80002de:	4a2e      	ldr	r2, [pc, #184]	; (8000398 <button_reading+0x1e4>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e6:	2b63      	cmp	r3, #99	; 0x63
 80002e8:	dd38      	ble.n	800035c <button_reading+0x1a8>
                {
                    button_state_save[i] = BUTTON_IS_LONG_PRESSED;
 80002ea:	4a29      	ldr	r2, [pc, #164]	; (8000390 <button_reading+0x1dc>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	210d      	movs	r1, #13
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    counter_for_button_pressed[i] = 0;
 80002f4:	4a28      	ldr	r2, [pc, #160]	; (8000398 <button_reading+0x1e4>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2100      	movs	r1, #0
 80002fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_flag_long[i] = 1;
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <button_reading+0x1e8>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2101      	movs	r1, #1
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }

                break;
 8000308:	e028      	b.n	800035c <button_reading+0x1a8>

            case BUTTON_IS_LONG_PRESSED:
                /* code */
                if (current_button_state[i] == RELEASED_STATE)
 800030a:	4a20      	ldr	r2, [pc, #128]	; (800038c <button_reading+0x1d8>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d109      	bne.n	800032a <button_reading+0x176>
                {
                    button_state_save[i] = BUTTON_IS_RELEASED;
 8000316:	4a1e      	ldr	r2, [pc, #120]	; (8000390 <button_reading+0x1dc>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	210c      	movs	r1, #12
 800031c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    counter_for_button_pressed[i] = 0;
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <button_reading+0x1e4>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2100      	movs	r1, #0
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                counter_for_button_pressed[i]++;
 800032a:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <button_reading+0x1e4>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	4918      	ldr	r1, [pc, #96]	; (8000398 <button_reading+0x1e4>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED / TIME_CYCLE)
 800033c:	4a16      	ldr	r2, [pc, #88]	; (8000398 <button_reading+0x1e4>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000344:	2b14      	cmp	r3, #20
 8000346:	d10b      	bne.n	8000360 <button_reading+0x1ac>
                {
                    counter_for_button_pressed[i] = 0;
 8000348:	4a13      	ldr	r2, [pc, #76]	; (8000398 <button_reading+0x1e4>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2100      	movs	r1, #0
 800034e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                break;
 8000352:	e005      	b.n	8000360 <button_reading+0x1ac>
            default:
                break;
 8000354:	bf00      	nop
 8000356:	e004      	b.n	8000362 <button_reading+0x1ae>
                break;
 8000358:	bf00      	nop
 800035a:	e002      	b.n	8000362 <button_reading+0x1ae>
                break;
 800035c:	bf00      	nop
 800035e:	e000      	b.n	8000362 <button_reading+0x1ae>
                break;
 8000360:	bf00      	nop
    for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b02      	cmp	r3, #2
 800036c:	f77f af28 	ble.w	80001c0 <button_reading+0xc>
            }
        }
    }
}
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000098 	.word	0x20000098
 800037c:	200000a4 	.word	0x200000a4
 8000380:	2000008c 	.word	0x2000008c
 8000384:	40010c00 	.word	0x40010c00
 8000388:	40010800 	.word	0x40010800
 800038c:	20000080 	.word	0x20000080
 8000390:	20000000 	.word	0x20000000
 8000394:	200000bc 	.word	0x200000bc
 8000398:	200000b0 	.word	0x200000b0
 800039c:	200000c8 	.word	0x200000c8

080003a0 <offAllLedMode>:
int second =0 , minute =0, hour=0;
enum ClockState currentState = NORMAL_STATE;
enum ClockMode currentMode = CHANGE_HOUR;
int _step = 1;
// ======= LED MODE ==========
void offAllLedMode(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, 1);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <offAllLedMode+0x28>)
 80003aa:	f001 f8ae 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, 1);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2102      	movs	r1, #2
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <offAllLedMode+0x2c>)
 80003b4:	f001 f8a9 	bl	800150a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2101      	movs	r1, #1
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <offAllLedMode+0x2c>)
 80003be:	f001 f8a4 	bl	800150a <HAL_GPIO_WritePin>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	40011000 	.word	0x40011000

080003d0 <changeLedMode>:
void changeLedMode(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	switch(currentMode){
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <changeLedMode+0x64>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d01c      	beq.n	8000416 <changeLedMode+0x46>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dc25      	bgt.n	800042c <changeLedMode+0x5c>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <changeLedMode+0x1a>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d00b      	beq.n	8000400 <changeLedMode+0x30>
	case CHANGE_SECOND:
		HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, 1);
		HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, 0);
			break;
	default:
		break;
 80003e8:	e020      	b.n	800042c <changeLedMode+0x5c>
		HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, 1);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	4812      	ldr	r0, [pc, #72]	; (8000438 <changeLedMode+0x68>)
 80003f0:	f001 f88b 	bl	800150a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	4810      	ldr	r0, [pc, #64]	; (800043c <changeLedMode+0x6c>)
 80003fa:	f001 f886 	bl	800150a <HAL_GPIO_WritePin>
		break;
 80003fe:	e016      	b.n	800042e <changeLedMode+0x5e>
		HAL_GPIO_WritePin(MODE1_GPIO_Port, MODE1_Pin, 1);
 8000400:	2201      	movs	r2, #1
 8000402:	2101      	movs	r1, #1
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <changeLedMode+0x6c>)
 8000406:	f001 f880 	bl	800150a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2102      	movs	r1, #2
 800040e:	480a      	ldr	r0, [pc, #40]	; (8000438 <changeLedMode+0x68>)
 8000410:	f001 f87b 	bl	800150a <HAL_GPIO_WritePin>
			break;
 8000414:	e00b      	b.n	800042e <changeLedMode+0x5e>
		HAL_GPIO_WritePin(MODE2_GPIO_Port, MODE2_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	2102      	movs	r1, #2
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <changeLedMode+0x68>)
 800041c:	f001 f875 	bl	800150a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MODE3_GPIO_Port, MODE3_Pin, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <changeLedMode+0x68>)
 8000426:	f001 f870 	bl	800150a <HAL_GPIO_WritePin>
			break;
 800042a:	e000      	b.n	800042e <changeLedMode+0x5e>
		break;
 800042c:	bf00      	nop
	}
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000e1 	.word	0x200000e1
 8000438:	40011000 	.word	0x40011000
 800043c:	40010c00 	.word	0x40010c00

08000440 <clearAllCLock>:
// ======= LED CLOCK =========
void clearAllCLock()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(portArr[0], pinArr[0], 1);
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <clearAllCLock+0xc8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <clearAllCLock+0xcc>)
 800044a:	8811      	ldrh	r1, [r2, #0]
 800044c:	2201      	movs	r2, #1
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f85b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[1], pinArr[1], 1);
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <clearAllCLock+0xc8>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a2c      	ldr	r2, [pc, #176]	; (800050c <clearAllCLock+0xcc>)
 800045a:	8851      	ldrh	r1, [r2, #2]
 800045c:	2201      	movs	r2, #1
 800045e:	4618      	mov	r0, r3
 8000460:	f001 f853 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[2], pinArr[2], 1);
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <clearAllCLock+0xc8>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	4a28      	ldr	r2, [pc, #160]	; (800050c <clearAllCLock+0xcc>)
 800046a:	8891      	ldrh	r1, [r2, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f001 f84b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[3], pinArr[3], 1);
 8000474:	4b24      	ldr	r3, [pc, #144]	; (8000508 <clearAllCLock+0xc8>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a24      	ldr	r2, [pc, #144]	; (800050c <clearAllCLock+0xcc>)
 800047a:	88d1      	ldrh	r1, [r2, #6]
 800047c:	2201      	movs	r2, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f001 f843 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[4], pinArr[4], 1);
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <clearAllCLock+0xc8>)
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <clearAllCLock+0xcc>)
 800048a:	8911      	ldrh	r1, [r2, #8]
 800048c:	2201      	movs	r2, #1
 800048e:	4618      	mov	r0, r3
 8000490:	f001 f83b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[5], pinArr[5], 1);
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <clearAllCLock+0xc8>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <clearAllCLock+0xcc>)
 800049a:	8951      	ldrh	r1, [r2, #10]
 800049c:	2201      	movs	r2, #1
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f833 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[6], pinArr[6], 1);
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <clearAllCLock+0xc8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a18      	ldr	r2, [pc, #96]	; (800050c <clearAllCLock+0xcc>)
 80004aa:	8991      	ldrh	r1, [r2, #12]
 80004ac:	2201      	movs	r2, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 f82b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[7], pinArr[7], 1);
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <clearAllCLock+0xc8>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <clearAllCLock+0xcc>)
 80004ba:	89d1      	ldrh	r1, [r2, #14]
 80004bc:	2201      	movs	r2, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 f823 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[8], pinArr[8], 1);
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <clearAllCLock+0xc8>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <clearAllCLock+0xcc>)
 80004ca:	8a11      	ldrh	r1, [r2, #16]
 80004cc:	2201      	movs	r2, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 f81b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[9], pinArr[9], 1);
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <clearAllCLock+0xc8>)
 80004d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <clearAllCLock+0xcc>)
 80004da:	8a51      	ldrh	r1, [r2, #18]
 80004dc:	2201      	movs	r2, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f813 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[10], pinArr[10], 1);
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <clearAllCLock+0xc8>)
 80004e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <clearAllCLock+0xcc>)
 80004ea:	8a91      	ldrh	r1, [r2, #20]
 80004ec:	2201      	movs	r2, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 f80b 	bl	800150a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(portArr[11], pinArr[11], 1);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <clearAllCLock+0xc8>)
 80004f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <clearAllCLock+0xcc>)
 80004fa:	8ad1      	ldrh	r1, [r2, #22]
 80004fc:	2201      	movs	r2, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 f803 	bl	800150a <HAL_GPIO_WritePin>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000024 	.word	0x20000024
 800050c:	2000000c 	.word	0x2000000c

08000510 <setNumberOnClock>:
void setNumberOnClock(int num)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(portArr[num], pinArr[num], 0);
 8000518:	4a07      	ldr	r2, [pc, #28]	; (8000538 <setNumberOnClock+0x28>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <setNumberOnClock+0x2c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000528:	2200      	movs	r2, #0
 800052a:	4619      	mov	r1, r3
 800052c:	f000 ffed 	bl	800150a <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000024 	.word	0x20000024
 800053c:	2000000c 	.word	0x2000000c

08000540 <clearNumberOnClock>:
void clearNumberOnClock(int num)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(portArr[num], pinArr[num], 1);
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <clearNumberOnClock+0x28>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <clearNumberOnClock+0x2c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	f000 ffd5 	bl	800150a <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000024 	.word	0x20000024
 800056c:	2000000c 	.word	0x2000000c

08000570 <init_clock>:
void init_clock(int _second,int _minute, int _hour){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	clearAllCLock();
 800057c:	f7ff ff60 	bl	8000440 <clearAllCLock>
	offAllLedMode();
 8000580:	f7ff ff0e 	bl	80003a0 <offAllLedMode>
	currentState = NORMAL_STATE;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <init_clock+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
	currentMode = CHANGE_HOUR;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <init_clock+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	changeLedMode();
 8000590:	f7ff ff1e 	bl	80003d0 <changeLedMode>
	second = _second;
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <init_clock+0x7c>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6013      	str	r3, [r2, #0]
	minute = _minute;
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <init_clock+0x80>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	6013      	str	r3, [r2, #0]
	hour = _hour;
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <init_clock+0x84>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
	setNumberOnClock(second/5);
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <init_clock+0x7c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <init_clock+0x88>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1052      	asrs	r2, r2, #1
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffaa 	bl	8000510 <setNumberOnClock>
	setNumberOnClock(minute/5);
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <init_clock+0x80>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <init_clock+0x88>)
 80005c2:	fb82 1203 	smull	r1, r2, r2, r3
 80005c6:	1052      	asrs	r2, r2, #1
 80005c8:	17db      	asrs	r3, r3, #31
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff9f 	bl	8000510 <setNumberOnClock>
	setNumberOnClock(hour);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <init_clock+0x84>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff9a 	bl	8000510 <setNumberOnClock>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000e0 	.word	0x200000e0
 80005e8:	200000e1 	.word	0x200000e1
 80005ec:	200000d4 	.word	0x200000d4
 80005f0:	200000d8 	.word	0x200000d8
 80005f4:	200000dc 	.word	0x200000dc
 80005f8:	66666667 	.word	0x66666667

080005fc <setupClock>:
// ======= SETUP CLOCK ===========
void setupClock(int step){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(currentState == NORMAL_STATE) return;
 8000604:	4b80      	ldr	r3, [pc, #512]	; (8000808 <setupClock+0x20c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f000 80f7 	beq.w	80007fc <setupClock+0x200>
	switch(currentMode){
 800060e:	4b7f      	ldr	r3, [pc, #508]	; (800080c <setupClock+0x210>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b02      	cmp	r3, #2
 8000614:	f000 8095 	beq.w	8000742 <setupClock+0x146>
 8000618:	2b02      	cmp	r3, #2
 800061a:	f300 80f1 	bgt.w	8000800 <setupClock+0x204>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <setupClock+0x2c>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d034      	beq.n	8000690 <setupClock+0x94>
				}
			}
			setNumberOnClock(second / 5);
			break;
		default:
			break;
 8000626:	e0eb      	b.n	8000800 <setupClock+0x204>
			if(hour != minute/5 && hour != second/5)
 8000628:	4b79      	ldr	r3, [pc, #484]	; (8000810 <setupClock+0x214>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a79      	ldr	r2, [pc, #484]	; (8000814 <setupClock+0x218>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1052      	asrs	r2, r2, #1
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad2      	subs	r2, r2, r3
 8000638:	4b77      	ldr	r3, [pc, #476]	; (8000818 <setupClock+0x21c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d010      	beq.n	8000662 <setupClock+0x66>
 8000640:	4b76      	ldr	r3, [pc, #472]	; (800081c <setupClock+0x220>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a73      	ldr	r2, [pc, #460]	; (8000814 <setupClock+0x218>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1052      	asrs	r2, r2, #1
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	4b71      	ldr	r3, [pc, #452]	; (8000818 <setupClock+0x21c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d004      	beq.n	8000662 <setupClock+0x66>
				clearNumberOnClock(hour);
 8000658:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <setupClock+0x21c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff6f 	bl	8000540 <clearNumberOnClock>
			hour+=step;
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <setupClock+0x21c>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a6b      	ldr	r2, [pc, #428]	; (8000818 <setupClock+0x21c>)
 800066c:	6013      	str	r3, [r2, #0]
			if(hour > 12 || hour < 0){
 800066e:	4b6a      	ldr	r3, [pc, #424]	; (8000818 <setupClock+0x21c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b0c      	cmp	r3, #12
 8000674:	dc03      	bgt.n	800067e <setupClock+0x82>
 8000676:	4b68      	ldr	r3, [pc, #416]	; (8000818 <setupClock+0x21c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	da02      	bge.n	8000684 <setupClock+0x88>
				hour = 0;
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <setupClock+0x21c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
			setNumberOnClock(hour);
 8000684:	4b64      	ldr	r3, [pc, #400]	; (8000818 <setupClock+0x21c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff41 	bl	8000510 <setNumberOnClock>
			break;
 800068e:	e0b8      	b.n	8000802 <setupClock+0x206>
			if(hour != minute/5 && minute/5 != second/5)
 8000690:	4b5f      	ldr	r3, [pc, #380]	; (8000810 <setupClock+0x214>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a5f      	ldr	r2, [pc, #380]	; (8000814 <setupClock+0x218>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1052      	asrs	r2, r2, #1
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <setupClock+0x21c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d01c      	beq.n	80006e2 <setupClock+0xe6>
 80006a8:	4b59      	ldr	r3, [pc, #356]	; (8000810 <setupClock+0x214>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a59      	ldr	r2, [pc, #356]	; (8000814 <setupClock+0x218>)
 80006ae:	fb82 1203 	smull	r1, r2, r2, r3
 80006b2:	1052      	asrs	r2, r2, #1
 80006b4:	17db      	asrs	r3, r3, #31
 80006b6:	1ad2      	subs	r2, r2, r3
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <setupClock+0x220>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4955      	ldr	r1, [pc, #340]	; (8000814 <setupClock+0x218>)
 80006be:	fb81 0103 	smull	r0, r1, r1, r3
 80006c2:	1049      	asrs	r1, r1, #1
 80006c4:	17db      	asrs	r3, r3, #31
 80006c6:	1acb      	subs	r3, r1, r3
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d00a      	beq.n	80006e2 <setupClock+0xe6>
				clearNumberOnClock(minute / 5);
 80006cc:	4b50      	ldr	r3, [pc, #320]	; (8000810 <setupClock+0x214>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a50      	ldr	r2, [pc, #320]	; (8000814 <setupClock+0x218>)
 80006d2:	fb82 1203 	smull	r1, r2, r2, r3
 80006d6:	1052      	asrs	r2, r2, #1
 80006d8:	17db      	asrs	r3, r3, #31
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff2f 	bl	8000540 <clearNumberOnClock>
			minute+=step*5;
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	441a      	add	r2, r3
 80006ea:	4b49      	ldr	r3, [pc, #292]	; (8000810 <setupClock+0x214>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a47      	ldr	r2, [pc, #284]	; (8000810 <setupClock+0x214>)
 80006f2:	6013      	str	r3, [r2, #0]
			if(minute > 59 || minute < 0){
 80006f4:	4b46      	ldr	r3, [pc, #280]	; (8000810 <setupClock+0x214>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b3b      	cmp	r3, #59	; 0x3b
 80006fa:	dc03      	bgt.n	8000704 <setupClock+0x108>
 80006fc:	4b44      	ldr	r3, [pc, #272]	; (8000810 <setupClock+0x214>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da12      	bge.n	800072a <setupClock+0x12e>
				minute = 0;
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <setupClock+0x214>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
				hour++;
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <setupClock+0x21c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a41      	ldr	r2, [pc, #260]	; (8000818 <setupClock+0x21c>)
 8000712:	6013      	str	r3, [r2, #0]
				if(hour > 12 || hour < 0){
 8000714:	4b40      	ldr	r3, [pc, #256]	; (8000818 <setupClock+0x21c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b0c      	cmp	r3, #12
 800071a:	dc03      	bgt.n	8000724 <setupClock+0x128>
 800071c:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <setupClock+0x21c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da02      	bge.n	800072a <setupClock+0x12e>
					hour = 0;
 8000724:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <setupClock+0x21c>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
			setNumberOnClock(minute / 5);
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <setupClock+0x214>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a39      	ldr	r2, [pc, #228]	; (8000814 <setupClock+0x218>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1052      	asrs	r2, r2, #1
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fee8 	bl	8000510 <setNumberOnClock>
			break;
 8000740:	e05f      	b.n	8000802 <setupClock+0x206>
			if(second/5 != hour && minute/5 != second/5)
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <setupClock+0x220>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a33      	ldr	r2, [pc, #204]	; (8000814 <setupClock+0x218>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1052      	asrs	r2, r2, #1
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <setupClock+0x21c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d01c      	beq.n	8000794 <setupClock+0x198>
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <setupClock+0x214>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <setupClock+0x218>)
 8000760:	fb82 1203 	smull	r1, r2, r2, r3
 8000764:	1052      	asrs	r2, r2, #1
 8000766:	17db      	asrs	r3, r3, #31
 8000768:	1ad2      	subs	r2, r2, r3
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <setupClock+0x220>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4929      	ldr	r1, [pc, #164]	; (8000814 <setupClock+0x218>)
 8000770:	fb81 0103 	smull	r0, r1, r1, r3
 8000774:	1049      	asrs	r1, r1, #1
 8000776:	17db      	asrs	r3, r3, #31
 8000778:	1acb      	subs	r3, r1, r3
 800077a:	429a      	cmp	r2, r3
 800077c:	d00a      	beq.n	8000794 <setupClock+0x198>
				clearNumberOnClock(second / 5);
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <setupClock+0x220>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <setupClock+0x218>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1052      	asrs	r2, r2, #1
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fed6 	bl	8000540 <clearNumberOnClock>
			second+=step*5;
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	441a      	add	r2, r3
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <setupClock+0x220>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <setupClock+0x220>)
 80007a4:	6013      	str	r3, [r2, #0]
			if(second > 59 || second < 0){
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <setupClock+0x220>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b3b      	cmp	r3, #59	; 0x3b
 80007ac:	dc03      	bgt.n	80007b6 <setupClock+0x1ba>
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <setupClock+0x220>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da16      	bge.n	80007e4 <setupClock+0x1e8>
				second = 0;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <setupClock+0x220>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
				minute+=step*5;
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	441a      	add	r2, r3
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <setupClock+0x214>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <setupClock+0x214>)
 80007cc:	6013      	str	r3, [r2, #0]
				if(minute > 59 || minute < 0){
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <setupClock+0x214>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b3b      	cmp	r3, #59	; 0x3b
 80007d4:	dc03      	bgt.n	80007de <setupClock+0x1e2>
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <setupClock+0x214>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da02      	bge.n	80007e4 <setupClock+0x1e8>
					minute=0;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <setupClock+0x214>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
			setNumberOnClock(second / 5);
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <setupClock+0x220>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <setupClock+0x218>)
 80007ea:	fb82 1203 	smull	r1, r2, r2, r3
 80007ee:	1052      	asrs	r2, r2, #1
 80007f0:	17db      	asrs	r3, r3, #31
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe8b 	bl	8000510 <setNumberOnClock>
			break;
 80007fa:	e002      	b.n	8000802 <setupClock+0x206>
	if(currentState == NORMAL_STATE) return;
 80007fc:	bf00      	nop
 80007fe:	e000      	b.n	8000802 <setupClock+0x206>
			break;
 8000800:	bf00      	nop
	}
}
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e0 	.word	0x200000e0
 800080c:	200000e1 	.word	0x200000e1
 8000810:	200000d8 	.word	0x200000d8
 8000814:	66666667 	.word	0x66666667
 8000818:	200000dc 	.word	0x200000dc
 800081c:	200000d4 	.word	0x200000d4

08000820 <checkButtonClock>:
// ====== CHECK BUTTON FUNCTION ======
void checkButtonClock(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if(isButtonLongPress(0)){
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fcab 	bl	8000180 <isButtonLongPress>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00c      	beq.n	800084a <checkButtonClock+0x2a>
		currentState = 1 - currentState;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <checkButtonClock+0xa0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f1c3 0301 	rsb	r3, r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <checkButtonClock+0xa0>)
 800083c:	701a      	strb	r2, [r3, #0]
		if(currentState == CHANGE_STATE){
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <checkButtonClock+0xa0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d101      	bne.n	800084a <checkButtonClock+0x2a>
			changeLedMode();
 8000846:	f7ff fdc3 	bl	80003d0 <changeLedMode>
		}
	}
	if(isButtonPress(0)){
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fc7e 	bl	800014c <isButtonPress>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d019      	beq.n	800088a <checkButtonClock+0x6a>
		if(currentState == CHANGE_STATE){
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <checkButtonClock+0xa0>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d12d      	bne.n	80008ba <checkButtonClock+0x9a>
			currentMode++;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <checkButtonClock+0xa4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <checkButtonClock+0xa4>)
 8000868:	701a      	strb	r2, [r3, #0]
			currentMode %= 3;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <checkButtonClock+0xa4>)
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <checkButtonClock+0xa8>)
 8000870:	fba3 1302 	umull	r1, r3, r3, r2
 8000874:	0859      	lsrs	r1, r3, #1
 8000876:	460b      	mov	r3, r1
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	440b      	add	r3, r1
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <checkButtonClock+0xa4>)
 8000882:	701a      	strb	r2, [r3, #0]
			changeLedMode();
 8000884:	f7ff fda4 	bl	80003d0 <changeLedMode>
		setupClock(_step);
	}
	else if(isButtonPress(2)){
		setupClock(-_step);
	}
}
 8000888:	e017      	b.n	80008ba <checkButtonClock+0x9a>
	else if(isButtonPress(1)){
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fc5e 	bl	800014c <isButtonPress>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <checkButtonClock+0x82>
		setupClock(_step);
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <checkButtonClock+0xac>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff feae 	bl	80005fc <setupClock>
}
 80008a0:	e00b      	b.n	80008ba <checkButtonClock+0x9a>
	else if(isButtonPress(2)){
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fc52 	bl	800014c <isButtonPress>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d005      	beq.n	80008ba <checkButtonClock+0x9a>
		setupClock(-_step);
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <checkButtonClock+0xac>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	425b      	negs	r3, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fea1 	bl	80005fc <setupClock>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	200000e1 	.word	0x200000e1
 80008c8:	aaaaaaab 	.word	0xaaaaaaab
 80008cc:	20000054 	.word	0x20000054

080008d0 <fsm_clock>:
// ======= FSM FUNCTION =======
void fsm_clock(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(currentState == CHANGE_STATE) return;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <fsm_clock+0x10c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d07d      	beq.n	80009d8 <fsm_clock+0x108>
	offAllLedMode();
 80008dc:	f7ff fd60 	bl	80003a0 <offAllLedMode>
	currentMode = CHANGE_HOUR;
 80008e0:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <fsm_clock+0x110>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	if (second/5 != minute/5 && second/5 != hour)
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <fsm_clock+0x114>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <fsm_clock+0x118>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	1052      	asrs	r2, r2, #1
 80008f2:	17db      	asrs	r3, r3, #31
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <fsm_clock+0x11c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	493b      	ldr	r1, [pc, #236]	; (80009e8 <fsm_clock+0x118>)
 80008fc:	fb81 0103 	smull	r0, r1, r1, r3
 8000900:	1049      	asrs	r1, r1, #1
 8000902:	17db      	asrs	r3, r3, #31
 8000904:	1acb      	subs	r3, r1, r3
 8000906:	429a      	cmp	r2, r3
 8000908:	d016      	beq.n	8000938 <fsm_clock+0x68>
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <fsm_clock+0x114>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a36      	ldr	r2, [pc, #216]	; (80009e8 <fsm_clock+0x118>)
 8000910:	fb82 1203 	smull	r1, r2, r2, r3
 8000914:	1052      	asrs	r2, r2, #1
 8000916:	17db      	asrs	r3, r3, #31
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <fsm_clock+0x120>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	d00a      	beq.n	8000938 <fsm_clock+0x68>
	{
	  clearNumberOnClock(second/5);
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <fsm_clock+0x114>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a30      	ldr	r2, [pc, #192]	; (80009e8 <fsm_clock+0x118>)
 8000928:	fb82 1203 	smull	r1, r2, r2, r3
 800092c:	1052      	asrs	r2, r2, #1
 800092e:	17db      	asrs	r3, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe04 	bl	8000540 <clearNumberOnClock>
	}
	second++;
 8000938:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <fsm_clock+0x114>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a29      	ldr	r2, [pc, #164]	; (80009e4 <fsm_clock+0x114>)
 8000940:	6013      	str	r3, [r2, #0]
	if (second > 59)
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <fsm_clock+0x114>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b3b      	cmp	r3, #59	; 0x3b
 8000948:	dd12      	ble.n	8000970 <fsm_clock+0xa0>
	{
	  second = 0;
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <fsm_clock+0x114>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
	  clearNumberOnClock(minute/5);
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <fsm_clock+0x11c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <fsm_clock+0x118>)
 8000956:	fb82 1203 	smull	r1, r2, r2, r3
 800095a:	1052      	asrs	r2, r2, #1
 800095c:	17db      	asrs	r3, r3, #31
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fded 	bl	8000540 <clearNumberOnClock>
	  minute+=5;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <fsm_clock+0x11c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3305      	adds	r3, #5
 800096c:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <fsm_clock+0x11c>)
 800096e:	6013      	str	r3, [r2, #0]
	}
	if (minute > 59)
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <fsm_clock+0x11c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b3b      	cmp	r3, #59	; 0x3b
 8000976:	dd0c      	ble.n	8000992 <fsm_clock+0xc2>
	{
	  minute = 0;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <fsm_clock+0x11c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
	  clearNumberOnClock(hour);
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <fsm_clock+0x120>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fddc 	bl	8000540 <clearNumberOnClock>
	  hour+=1;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <fsm_clock+0x120>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <fsm_clock+0x120>)
 8000990:	6013      	str	r3, [r2, #0]
	}
	if (hour > 12)
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <fsm_clock+0x120>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b0c      	cmp	r3, #12
 8000998:	dd02      	ble.n	80009a0 <fsm_clock+0xd0>
	  hour = 0;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <fsm_clock+0x120>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
	setNumberOnClock(hour);
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <fsm_clock+0x120>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fdb3 	bl	8000510 <setNumberOnClock>
	setNumberOnClock(minute/5);
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <fsm_clock+0x11c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <fsm_clock+0x118>)
 80009b0:	fb82 1203 	smull	r1, r2, r2, r3
 80009b4:	1052      	asrs	r2, r2, #1
 80009b6:	17db      	asrs	r3, r3, #31
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fda8 	bl	8000510 <setNumberOnClock>
	setNumberOnClock(second/5);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <fsm_clock+0x114>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <fsm_clock+0x118>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1052      	asrs	r2, r2, #1
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fd9d 	bl	8000510 <setNumberOnClock>
 80009d6:	e000      	b.n	80009da <fsm_clock+0x10a>
	if(currentState == CHANGE_STATE) return;
 80009d8:	bf00      	nop
}
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000e0 	.word	0x200000e0
 80009e0:	200000e1 	.word	0x200000e1
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	66666667 	.word	0x66666667
 80009ec:	200000d8 	.word	0x200000d8
 80009f0:	200000dc 	.word	0x200000dc

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fa7c 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f822 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f000 f8a8 	bl	8000b54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a04:	f000 f85a 	bl	8000abc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x48>)
 8000a0a:	f001 f9c5 	bl	8001d98 <HAL_TIM_Base_Start_IT>
  setTimer1(100);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f000 f9d0 	bl	8000db4 <setTimer1>
  setTimer2(10);
 8000a14:	200a      	movs	r0, #10
 8000a16:	f000 f9e9 	bl	8000dec <setTimer2>
  init_clock(30, 59, 23);
 8000a1a:	2217      	movs	r2, #23
 8000a1c:	213b      	movs	r1, #59	; 0x3b
 8000a1e:	201e      	movs	r0, #30
 8000a20:	f7ff fda6 	bl	8000570 <init_clock>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer1_flag == 1){
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <main+0x4c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d104      	bne.n	8000a36 <main+0x42>
		  fsm_clock();
 8000a2c:	f7ff ff50 	bl	80008d0 <fsm_clock>
		  setTimer1(100);
 8000a30:	2064      	movs	r0, #100	; 0x64
 8000a32:	f000 f9bf 	bl	8000db4 <setTimer1>
	  }
	  checkButtonClock();
 8000a36:	f7ff fef3 	bl	8000820 <checkButtonClock>
	  if(timer1_flag == 1){
 8000a3a:	e7f3      	b.n	8000a24 <main+0x30>
 8000a3c:	200000e4 	.word	0x200000e4
 8000a40:	2000012c 	.word	0x2000012c

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b090      	sub	sp, #64	; 0x40
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	2228      	movs	r2, #40	; 0x28
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fd4e 	bl	80024f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fd5e 	bl	800153c <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a86:	f000 f901 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ffcc 	bl	8001a40 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aae:	f000 f8ed 	bl	8000c8c <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3740      	adds	r7, #64	; 0x40
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000ae2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000af0:	2209      	movs	r2, #9
 8000af2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000b02:	f001 f8f9 	bl	8001cf8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b0c:	f000 f8be 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000b1e:	f001 fa95 	bl	800204c <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 f8b0 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fc6b 	bl	8002414 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f8a2 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000e4 	.word	0x200000e4

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a37      	ldr	r2, [pc, #220]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_GPIO_Init+0x110>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED7_Pin|LED1_Pin|LED8_Pin
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f240 7171 	movw	r1, #1905	; 0x771
 8000bb6:	482c      	ldr	r0, [pc, #176]	; (8000c68 <MX_GPIO_Init+0x114>)
 8000bb8:	f000 fca7 	bl	800150a <HAL_GPIO_WritePin>
                          |LED11_Pin|MODE1_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED9_Pin|LED5_Pin|LED3_Pin|LED4_Pin
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000bc2:	482a      	ldr	r0, [pc, #168]	; (8000c6c <MX_GPIO_Init+0x118>)
 8000bc4:	f000 fca1 	bl	800150a <HAL_GPIO_WritePin>
                          |LED12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MODE2_Pin|MODE3_Pin|LED10_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2183      	movs	r1, #131	; 0x83
 8000bcc:	4828      	ldr	r0, [pc, #160]	; (8000c70 <MX_GPIO_Init+0x11c>)
 8000bce:	f000 fc9c 	bl	800150a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED7_Pin LED1_Pin LED8_Pin
                           LED11_Pin MODE1_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED7_Pin|LED1_Pin|LED8_Pin
 8000bd2:	f240 7371 	movw	r3, #1905	; 0x771
 8000bd6:	613b      	str	r3, [r7, #16]
                          |LED11_Pin|MODE1_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <MX_GPIO_Init+0x114>)
 8000bec:	f000 faf2 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <MX_GPIO_Init+0x114>)
 8000c04:	f000 fae6 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin;
 8000c08:	f240 4304 	movw	r3, #1028	; 0x404
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_GPIO_Init+0x118>)
 8000c1e:	f000 fad9 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED9_Pin LED5_Pin LED3_Pin LED4_Pin
                           LED12_Pin */
  GPIO_InitStruct.Pin = LED9_Pin|LED5_Pin|LED3_Pin|LED4_Pin
 8000c22:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000c26:	613b      	str	r3, [r7, #16]
                          |LED12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_GPIO_Init+0x118>)
 8000c3c:	f000 faca 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE2_Pin MODE3_Pin LED10_Pin */
  GPIO_InitStruct.Pin = MODE2_Pin|MODE3_Pin|LED10_Pin;
 8000c40:	2383      	movs	r3, #131	; 0x83
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	; (8000c70 <MX_GPIO_Init+0x11c>)
 8000c58:	f000 fabc 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40011000 	.word	0x40011000

08000c74 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	button_reading();
 8000c7c:	f7ff fa9a 	bl	80001b4 <button_reading>
	timerRun();
 8000c80:	f000 f8d0 	bl	8000e24 <timerRun>

}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x5c>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_MspInit+0x60>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_MspInit+0x60>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	201c      	movs	r0, #28
 8000d2c:	f000 fa1b 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d30:	201c      	movs	r0, #28
 8000d32:	f000 fa34 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f8f9 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM2_IRQHandler+0x10>)
 8000d9a:	f001 f84f 	bl	8001e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000e4 	.word	0x200000e4

08000da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <setTimer1>:

int timer3_flag = 0;
int timer3_duration;


void setTimer1(int duration){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    timer1_duration = duration / TIME_CYCLE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <setTimer1+0x2c>)
 8000dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc4:	1092      	asrs	r2, r2, #2
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <setTimer1+0x30>)
 8000dcc:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <setTimer1+0x34>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	66666667 	.word	0x66666667
 8000de4:	20000130 	.word	0x20000130
 8000de8:	2000012c 	.word	0x2000012c

08000dec <setTimer2>:

void setTimer2(int duration){
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    timer2_duration = duration / TIME_CYCLE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <setTimer2+0x2c>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1092      	asrs	r2, r2, #2
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <setTimer2+0x30>)
 8000e04:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <setTimer2+0x34>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	66666667 	.word	0x66666667
 8000e1c:	20000138 	.word	0x20000138
 8000e20:	20000134 	.word	0x20000134

08000e24 <timerRun>:

void setTimer3(int duration){
    timer3_duration = duration / TIME_CYCLE;
    timer3_flag = 0;
}
void timerRun(){
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
    if(timer1_duration > 0){
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <timerRun+0x6c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd0b      	ble.n	8000e48 <timerRun+0x24>
        timer1_duration--;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <timerRun+0x6c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <timerRun+0x6c>)
 8000e38:	6013      	str	r3, [r2, #0]
        if(timer1_duration <= 0){
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <timerRun+0x6c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dc02      	bgt.n	8000e48 <timerRun+0x24>
            timer1_flag = 1;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <timerRun+0x70>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
        }
    }
     if(timer2_duration > 0){
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <timerRun+0x74>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd0b      	ble.n	8000e68 <timerRun+0x44>
        timer2_duration--;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <timerRun+0x74>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <timerRun+0x74>)
 8000e58:	6013      	str	r3, [r2, #0]
        if(timer2_duration <= 0){
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <timerRun+0x74>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dc02      	bgt.n	8000e68 <timerRun+0x44>
            timer2_flag = 1;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <timerRun+0x78>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
            
        }
    }
    if(timer3_duration > 0){
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <timerRun+0x7c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dd0b      	ble.n	8000e88 <timerRun+0x64>
        timer3_duration--;
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <timerRun+0x7c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <timerRun+0x7c>)
 8000e78:	6013      	str	r3, [r2, #0]
        if(timer3_duration <= 0){
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <timerRun+0x7c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	dc02      	bgt.n	8000e88 <timerRun+0x64>
            timer3_flag = 1;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <timerRun+0x80>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
            
        }
    }
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000130 	.word	0x20000130
 8000e94:	2000012c 	.word	0x2000012c
 8000e98:	20000138 	.word	0x20000138
 8000e9c:	20000134 	.word	0x20000134
 8000ea0:	20000140 	.word	0x20000140
 8000ea4:	2000013c 	.word	0x2000013c

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff ff7e 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eae:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec4:	4c09      	ldr	r4, [pc, #36]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fb17 	bl	8002504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fd8d 	bl	80009f4 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ee4:	08002590 	.word	0x08002590
  ldr r2, =_sbss
 8000ee8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000eec:	20000148 	.word	0x20000148

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f923 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fec2 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f93b 	bl	80011ba <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5c:	f000 f903 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000058 	.word	0x20000058
 8000f78:	20000060 	.word	0x20000060
 8000f7c:	2000005c 	.word	0x2000005c

08000f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	20000144 	.word	0x20000144

08000fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000144 	.word	0x20000144

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4906      	ldr	r1, [pc, #24]	; (8001050 <__NVIC_EnableIRQ+0x34>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff90 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff2d 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff42 	bl	8001000 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff90 	bl	80010a8 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5f 	bl	8001054 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff35 	bl	800101c <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	; 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e169      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8158 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a9a      	ldr	r2, [pc, #616]	; (8001474 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d05e      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001210:	4a98      	ldr	r2, [pc, #608]	; (8001474 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d875      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001216:	4a98      	ldr	r2, [pc, #608]	; (8001478 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d058      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 800121c:	4a96      	ldr	r2, [pc, #600]	; (8001478 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d86f      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001222:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_GPIO_Init+0x2a8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d052      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001228:	4a94      	ldr	r2, [pc, #592]	; (800147c <HAL_GPIO_Init+0x2a8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d869      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800122e:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_GPIO_Init+0x2ac>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04c      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001234:	4a92      	ldr	r2, [pc, #584]	; (8001480 <HAL_GPIO_Init+0x2ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d863      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800123a:	4a92      	ldr	r2, [pc, #584]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d046      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001240:	4a90      	ldr	r2, [pc, #576]	; (8001484 <HAL_GPIO_Init+0x2b0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d85d      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d82a      	bhi.n	80012a0 <HAL_GPIO_Init+0xcc>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d859      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <HAL_GPIO_Init+0x80>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012bb 	.word	0x080012bb
 8001260:	080012fd 	.word	0x080012fd
 8001264:	08001303 	.word	0x08001303
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	08001303 	.word	0x08001303
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	4a79      	ldr	r2, [pc, #484]	; (8001488 <HAL_GPIO_Init+0x2b4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e029      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e024      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01f      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e01a      	b.n	8001304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e013      	b.n	8001304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e009      	b.n	8001304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x130>
          break;
 8001302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2bff      	cmp	r3, #255	; 0xff
 8001308:	d801      	bhi.n	800130e <HAL_GPIO_Init+0x13a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_Init+0x13e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d802      	bhi.n	8001320 <HAL_GPIO_Init+0x14c>
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x152>
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	3b08      	subs	r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	210f      	movs	r1, #15
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80b1 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_GPIO_Init+0x2b8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_GPIO_Init+0x2b8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136c:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2bc>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_GPIO_Init+0x2c0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <HAL_GPIO_Init+0x2c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	; (800149c <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1e0>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d2:	492f      	ldr	r1, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x2bc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	492c      	ldr	r1, [pc, #176]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	4928      	ldr	r1, [pc, #160]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	491e      	ldr	r1, [pc, #120]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4914      	ldr	r1, [pc, #80]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d021      	beq.n	80014a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x2e2>
 8001472:	bf00      	nop
 8001474:	10320000 	.word	0x10320000
 8001478:	10310000 	.word	0x10310000
 800147c:	10220000 	.word	0x10220000
 8001480:	10210000 	.word	0x10210000
 8001484:	10120000 	.word	0x10120000
 8001488:	10110000 	.word	0x10110000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	; (80014d8 <HAL_GPIO_Init+0x304>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae8e 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	372c      	adds	r7, #44	; 0x2c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151a:	787b      	ldrb	r3, [r7, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001526:	e003      	b.n	8001530 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	611a      	str	r2, [r3, #16]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e272      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001568:	4b8f      	ldr	r3, [pc, #572]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
 8001574:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d06c      	beq.n	8001668 <HAL_RCC_OscConfig+0x12c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d168      	bne.n	8001668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e24c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x76>
 80015a4:	4b80      	ldr	r3, [pc, #512]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7f      	ldr	r2, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e02e      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7a      	ldr	r2, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b78      	ldr	r3, [pc, #480]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a77      	ldr	r2, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0xbc>
 80015de:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a71      	ldr	r2, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015f8:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fcc4 	bl	8000fa4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fcc0 	bl	8000fa4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e200      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b5d      	ldr	r3, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xe4>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcb0 	bl	8000fa4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcac 	bl	8000fa4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ec      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x10c>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001682:	4b49      	ldr	r3, [pc, #292]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
 800168e:	4b46      	ldr	r3, [pc, #280]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1c0      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4939      	ldr	r1, [pc, #228]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x270>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fc65 	bl	8000fa4 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fc61 	bl	8000fa4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1a1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4927      	ldr	r1, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x270>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fc44 	bl	8000fa4 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fc40 	bl	8000fa4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e180      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fc24 	bl	8000fa4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fc20 	bl	8000fa4 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e160      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 fa9c 	bl	8001cbc <RCC_Delay>
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fc0a 	bl	8000fa4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fc06 	bl	8000fa4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e146      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42420000 	.word	0x42420000
 80017b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e9      	bne.n	8001794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a6 	beq.w	800191a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a87      	ldr	r2, [pc, #540]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b85      	ldr	r3, [pc, #532]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b82      	ldr	r3, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbc7 	bl	8000fa4 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fbc3 	bl	8000fa4 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e103      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x312>
 8001840:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a69      	ldr	r2, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x356>
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a5d      	ldr	r2, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a5a      	ldr	r2, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb77 	bl	8000fa4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fb73 	bl	8000fa4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x37e>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fb61 	bl	8000fa4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fb5d 	bl	8000fa4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e09b      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d061      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d146      	bne.n	80019c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb31 	bl	8000fa4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff fb2d 	bl	8000fa4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e06d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4921      	ldr	r1, [pc, #132]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a19      	ldr	r1, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	430b      	orrs	r3, r1
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fb01 	bl	8000fa4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fafd 	bl	8000fa4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46a>
 80019c4:	e035      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff faea 	bl	8000fa4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fae6 	bl	8000fa4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e026      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x498>
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e019      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_OscConfig+0x500>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4965      	ldr	r1, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fa38 	bl	8000fa4 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fa34 	bl	8000fa4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4922      	ldr	r1, [pc, #136]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f996 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08002564 	.word	0x08002564
 8001c0c:	20000058 	.word	0x20000058
 8001c10:	2000005c 	.word	0x2000005c

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x36>
 8001c42:	e027      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	e027      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c5b      	lsrs	r3, r3, #17
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	693b      	ldr	r3, [r7, #16]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	08002574 	.word	0x08002574
 8001cb4:	08002584 	.word	0x08002584
 8001cb8:	003d0900 	.word	0x003d0900

08001cbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <RCC_Delay+0x34>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <RCC_Delay+0x38>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a5b      	lsrs	r3, r3, #9
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd8:	bf00      	nop
  }
  while (Delay --);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	60fa      	str	r2, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f9      	bne.n	8001cd8 <RCC_Delay+0x1c>
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000058 	.word	0x20000058
 8001cf4:	10624dd3 	.word	0x10624dd3

08001cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e041      	b.n	8001d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe ffec 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 fa74 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e03a      	b.n	8001e26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <HAL_TIM_Base_Start_IT+0x98>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00e      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x58>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dda:	d009      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x58>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_TIM_Base_Start_IT+0x9c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d004      	beq.n	8001df0 <HAL_TIM_Base_Start_IT+0x58>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d111      	bne.n	8001e14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d010      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e12:	e007      	b.n	8001e24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800

08001e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0202 	mvn.w	r2, #2
 8001e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f9b4 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9a7 	bl	80021da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f9b6 	bl	80021fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f98a 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f97d 	bl	80021da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f98c 	bl	80021fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0208 	mvn.w	r2, #8
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f960 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f953 	bl	80021da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f962 	bl	80021fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0210 	mvn.w	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f936 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f929 	bl	80021da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f938 	bl	80021fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fe5a 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa7b 	bl	80024e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b40      	cmp	r3, #64	; 0x40
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8fc 	bl	8002210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b20      	cmp	r3, #32
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0220 	mvn.w	r2, #32
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa46 	bl	80024d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_TIM_ConfigClockSource+0x1c>
 8002064:	2302      	movs	r3, #2
 8002066:	e0b4      	b.n	80021d2 <HAL_TIM_ConfigClockSource+0x186>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800208e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a0:	d03e      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0xd4>
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a6:	f200 8087 	bhi.w	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ae:	f000 8086 	beq.w	80021be <HAL_TIM_ConfigClockSource+0x172>
 80020b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b6:	d87f      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020b8:	2b70      	cmp	r3, #112	; 0x70
 80020ba:	d01a      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0xa6>
 80020bc:	2b70      	cmp	r3, #112	; 0x70
 80020be:	d87b      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c0:	2b60      	cmp	r3, #96	; 0x60
 80020c2:	d050      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0x11a>
 80020c4:	2b60      	cmp	r3, #96	; 0x60
 80020c6:	d877      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020c8:	2b50      	cmp	r3, #80	; 0x50
 80020ca:	d03c      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0xfa>
 80020cc:	2b50      	cmp	r3, #80	; 0x50
 80020ce:	d873      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d058      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x13a>
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d86f      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020d8:	2b30      	cmp	r3, #48	; 0x30
 80020da:	d064      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x15a>
 80020dc:	2b30      	cmp	r3, #48	; 0x30
 80020de:	d86b      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d060      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x15a>
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d867      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05c      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x15a>
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d05a      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x15a>
 80020f0:	e062      	b.n	80021b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002102:	f000 f968 	bl	80023d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	609a      	str	r2, [r3, #8]
      break;
 800211e:	e04f      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	f000 f951 	bl	80023d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002142:	609a      	str	r2, [r3, #8]
      break;
 8002144:	e03c      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002152:	461a      	mov	r2, r3
 8002154:	f000 f8c8 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2150      	movs	r1, #80	; 0x50
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f91f 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002164:	e02c      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002172:	461a      	mov	r2, r3
 8002174:	f000 f8e6 	bl	8002344 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2160      	movs	r1, #96	; 0x60
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f90f 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002184:	e01c      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f8a8 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2140      	movs	r1, #64	; 0x40
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f8ff 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80021a4:	e00c      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f000 f8f6 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80021b6:	e003      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e000      	b.n	80021c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
	...

08002224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <TIM_Base_SetConfig+0xb8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00b      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002242:	d007      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <TIM_Base_SetConfig+0xbc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <TIM_Base_SetConfig+0xc0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <TIM_Base_SetConfig+0xb8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <TIM_Base_SetConfig+0xbc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <TIM_Base_SetConfig+0xc0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <TIM_Base_SetConfig+0xb8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	615a      	str	r2, [r3, #20]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800

080022e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 030a 	bic.w	r3, r3, #10
 8002324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f023 0210 	bic.w	r2, r3, #16
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800236e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	031b      	lsls	r3, r3, #12
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002380:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f043 0307 	orr.w	r3, r3, #7
 80023c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b087      	sub	sp, #28
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002428:	2302      	movs	r3, #2
 800242a:	e046      	b.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d009      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10c      	bne.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4313      	orrs	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800

080024d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <memset>:
 80024f4:	4603      	mov	r3, r0
 80024f6:	4402      	add	r2, r0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <memset+0xa>
 80024fc:	4770      	bx	lr
 80024fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002502:	e7f9      	b.n	80024f8 <memset+0x4>

08002504 <__libc_init_array>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	2600      	movs	r6, #0
 8002508:	4d0c      	ldr	r5, [pc, #48]	; (800253c <__libc_init_array+0x38>)
 800250a:	4c0d      	ldr	r4, [pc, #52]	; (8002540 <__libc_init_array+0x3c>)
 800250c:	1b64      	subs	r4, r4, r5
 800250e:	10a4      	asrs	r4, r4, #2
 8002510:	42a6      	cmp	r6, r4
 8002512:	d109      	bne.n	8002528 <__libc_init_array+0x24>
 8002514:	f000 f81a 	bl	800254c <_init>
 8002518:	2600      	movs	r6, #0
 800251a:	4d0a      	ldr	r5, [pc, #40]	; (8002544 <__libc_init_array+0x40>)
 800251c:	4c0a      	ldr	r4, [pc, #40]	; (8002548 <__libc_init_array+0x44>)
 800251e:	1b64      	subs	r4, r4, r5
 8002520:	10a4      	asrs	r4, r4, #2
 8002522:	42a6      	cmp	r6, r4
 8002524:	d105      	bne.n	8002532 <__libc_init_array+0x2e>
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	f855 3b04 	ldr.w	r3, [r5], #4
 800252c:	4798      	blx	r3
 800252e:	3601      	adds	r6, #1
 8002530:	e7ee      	b.n	8002510 <__libc_init_array+0xc>
 8002532:	f855 3b04 	ldr.w	r3, [r5], #4
 8002536:	4798      	blx	r3
 8002538:	3601      	adds	r6, #1
 800253a:	e7f2      	b.n	8002522 <__libc_init_array+0x1e>
 800253c:	08002588 	.word	0x08002588
 8002540:	08002588 	.word	0x08002588
 8002544:	08002588 	.word	0x08002588
 8002548:	0800258c 	.word	0x0800258c

0800254c <_init>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	bf00      	nop
 8002550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002552:	bc08      	pop	{r3}
 8002554:	469e      	mov	lr, r3
 8002556:	4770      	bx	lr

08002558 <_fini>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr
